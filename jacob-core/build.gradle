buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.6.RELEASE")
        classpath 'io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }
}

version = '0.1-SNAPSHOT'
group = 'org.wallerlab'


apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'


jar {
    baseName = 'jacob-core'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'https://repo.spring.io/libs-snapshot' }
}


dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.6.RELEASE'
    }
}

dependencies {

    compile 'org.codehaus.groovy:groovy-all:2.4.7'


    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-batch'
    compile 'org.springframework:spring-oxm'
    compile 'org.springframework.data:spring-data-neo4j:4.2.0.BUILD-SNAPSHOT'

    compile group: 'org.neo4j', name: 'neo4j-ogm-core', version: '2.0.4'
    compile 'org.neo4j:neo4j-ogm-embedded-driver:2.0.4'
    compile group: 'org.neo4j', name: 'neo4j-ogm-http-driver', version: '2.0.4'


    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-1'
    testCompile 'org.springframework:spring-test'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-1'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/generated/**'])
        })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
